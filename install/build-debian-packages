#!/usr/bin/env python

from optparse import OptionParser
from os import chdir, getcwd, listdir, makedirs, pardir, sep
from os.path import abspath, isdir, join
from shutil import copyfile, rmtree
from subprocess import call

from util import (
    VERSION,
    createSourcePackage,
    getRootDirectory,
    getTemplatesDirectory,
    writeTemplate
)

def main():
    rootDirectory = getRootDirectory()
    distDirectory = abspath(join(rootDirectory, pardir))

    parser = OptionParser("usage: %prog [options]")
    parser.add_option("-d", "--destination-dir", action="store",
                      default=distDirectory, dest="destinationDir",
                      help="Directory to store package in")
    parser.add_option("-p", "--prefix", action="store", default="/usr/local",
                      dest="prefix", help="Application install prefix")
    options, args = parser.parse_args()

    if len(args):
        parser.error("incorrect number of required arguments")
    destinationDir = options.destinationDir
    prefix = options.prefix

    # Add Debian package data to source folder.
    debianTemplateDir = join(getTemplatesDirectory(), "debian")
    debianDir = join(rootDirectory, "debian")
    if isdir(debianDir):
        rmtree(debianDir)
    prefix = abspath(prefix)
    data = {
        "prefix": prefix,
        "prefixDirs": prefix[len(sep):]
    }
    for f in listdir(debianTemplateDir):
        writeTemplate(join(debianDir, f), join(debianTemplateDir, f), data)

    # Build the Debian package.
    oldDirectory = getcwd()
    chdir(rootDirectory)
    try:
        if call(["dpkg-buildpackage", "-us", "-uc"]):
            parser.error("error while building Debian package")

        # Copy .deb files to destination directory.
        if not isdir(destinationDir):
            makedirs(destinationDir)
        fp = file(join(debianDir, "files"))
        try:
            while True:
                line = fp.readline()
                if not line:
                    break
                line = line.strip()
                if not line:
                    continue
                packageName = line[:line.index(".deb ") + 4]
                source = abspath(join(distDirectory, packageName))
                destination = abspath(join(destinationDir, packageName))
                if source != destination:
                    copyfile(source, destination)
        finally:
            fp.close()

    finally:
        chdir(oldDirectory)

if __name__ == "__main__":
   main()
