#!/usr/bin/env python

from optparse import OptionParser
from os import listdir, makedirs
from os.path import abspath, basename, dirname, isdir, isfile, join
from shutil import copytree, rmtree
from subprocess import PIPE, Popen, call
from sys import argv, exit, stdout
from tempfile import mkdtemp

from util import (
    MAJOR_VERSION,
    MINOR_VERSION,
    PLATFORM_MACX,
    REVISION,
    getPlatform,
    writeTemplate
)

def copyLibraries(binaryFile, installPath, libDestinationDir,
                  ignoreDirectories=[], executablePath=None, dependencyMap={}):
    if executablePath is None:
        executablePath = binaryFile
    ignoreDirectories = [(abspath(d) + sep) for d in ignoreDirectories]
    for dependency in getDependencies(binaryFile):
        dependencyPath = join(executablePath, dependency)
        if any((dependencyPath.startswith(d) for d in ignoreDirectories)):
            continue
        libFile = basename(dependency)
        if libFile == basename(binaryFile):
            continue

        # The dependency isn't a self-reference.  See if it's in the dependency
        # map.
        location = dependencyMap.get(libFile)
        if location is None:

            # We'll infer the new location of the dependency.
            destinationPath = join(libDestinationDir, libFile)
            location = join(installPath, libFile)
            if not isfile(destinationPath):

                # The dependency hasn't been copied over.  So, copy it over,
                # and update library references.
                if not isfile(dependencyPath):
                    raise Exception("dependency '%s' does not exist" %
                                    dependencyPath)
                destinationDir = dirname(destinationPath)
                if not isdir(destinationDir):
                    makedirs(destinationDir)
                stdout.write("Copying library '%s' to '%s' ...\n" %
                             (dependencyPath, destinationPath))
                copyfile(dependencyPath, destinationPath)
                copyLibraries(destinationPath, installPath, libDestinationDir,
                              ignoreDirectories, executablePath)
                setLibraryLocation(destinationPath, location)

        stdout.write("Replacing dependency '%s' with '%s' in '%s' ...\n" %
                     (dependency, location, binaryFile))
        args = ["install_name_tool", "-change", dependency, location,
                binaryFile]
        if call(args):
            raise Exception("error replacing dependency '%s' with '%s' in "
                            "'%s'" % (dependency, location, binaryFile))

def getDependencies(binaryFile):

    """Uses `otool` to get the libraries that the specified binary file (either
       an executable or a dynamic library) depends on.  Returns the list of
       libraries."""

    args = ["otool", "-L", binaryFile]
    process = Popen(args, stdout=PIPE)
    stdoutData, stderrData = process.communicate()
    if process.returncode:
        raise Exception("error getting dependencies for '%s'" % binaryFile)
    dependencies = []
    for s in stdoutData.strip().splitlines()[1:]:
        s = s.strip()
        pos = s.find(" (compatibility ")
        if pos == -1:
            raise Exception("unexpected line output from libtool: '%s'" % s)
        dependencies.append(s[:pos].strip())
    return dependencies

def setLibraryLocation(libraryFile, location):

    """Uses `install_name_tool` to set the id of the given library file to the
       given location."""

    stdout.write("Setting library location of '%s' to '%s' ...\n" %
                 (libraryFile, location))
    args = ["install_name_tool", "-id", location, libraryFile]
    if call(args):
        raise Exception("error setting library location to '%s' for '%s'" %
                        (location, libraryFile))

def main():
    if platform != PLATFORM_MACX:
        exit("This build script is only meant to be run on Mac OSX")

    parser = OptionParser("usage: %prog [options] package")
    parser.add_option("-b", "--build-dir", action="store", default=None,
                      dest="buildDir", help="Build directory")
    parser.add_option("-p", "--packagemaker-app", action="store",
                      default=None, dest="packageMakerApp",
                      help="Location of the packagemaker application")
    options, args = parser.parse_args()

    # Validate arguments
    if len(args) != 1:
        parser.error("incorrect number of required arguments")
    rootDir = abspath(join(dirname(__file__), pardir))
    buildDir = options.buildDir
    if buildDir is None:
        buildDir = join(rootDir, "build")
    if not isdir(buildDir):
        parser.error("'%s': build directory does not exist" % buildDir)
    packageMakerApp = options.packageMakerApp
    if packageMakerApp is None:
        packageMakerApp = "/Developer/usr/bin/packagemaker"
    if not isfile(packageMakerApp):
        parser.error("'%s': packagemaker utility not found" % packageMakerApp)
    package = args[0]

    tempDir = mkdtemp()
    try:
        copytree(buildDir, tempDir)
        appDir = join(tempDir, "Applications", "synthclone.app")
        contentsDir = join(appDir, "Contents")
        executablePath = join(contentsDir, "MacOS", "synthclone")
        frameworksDir = join(contentsDir, "Frameworks")
        ignoreDirectories = ["/lib", "/usr/lib", "/Library/Frameworks",
                             "/System/Library/Frameworks"]
        relativeFrameworksPath = "@executable_path/../Frameworks/"
        version = "%d.%d.%d" % (MAJOR_VERSION, MINOR_VERSION, REVISION)

        # Copy libraries linked to application.
        stdout.write("Copying dependencies for '%s' ...\n" %
                     executablePath)
        if call(["macdeployqt", appDir]):
            parser.error("macdeployqt returned an error")

        # The libraries are now linked correctly in the executable.  Make a map
        # of correctly linked Qt libraries.
        qtDependencyMap = {}
        for dependency in getDependencies(executablePath):
            baseLibName = basename(dependency)
            if baseLibName.startswith("Qt"):
                qtDependencyMap[baseLibName] = dependency

        # Copy libraries linked to plugins.
        pluginsDir = join(contentsDir, "PlugIns")
        for f in listdir(pluginsDir):
            plugin = join(pluginsDir, f)
            if not isfile(plugin):
                continue
            setLibraryLocation(plugin, "@executable_path/../PlugIns/%s" % f)
            stdout.write("Copying dependencies for '%s' ...\n" % plugin)
            copyLibraries(plugin, relativeFrameworksPath, frameworksDir,
                          ignoreDirectories, executablePath, qtDependencyMap)

        # Copy libraries linked to synthclone library.
        libPath = join(tempDir, "Library", "Frameworks",
                       "synthclone.framework","Versions", version,
                       "synthclone")
        stdout.write("Copying dependencies for '%s' ...\n" % libPath)
        copyLibraries(libPath, relativeFrameworksPath, frameworksDir,
                      ignoreDirectories, executablePath, qtDependencyMap)

        packageMakerConfigDir = mkdtemp(suffix=".pmdoc")
        try:

            # Populate packagemaker config templates.
            data = {
                "package": package,
                "version": "%d.%d.%d" % (MAJOR_VERSION, MINOR_VERSION,
                                         REVISION)
            }
            docDir = join(rootDir, "templates", "synthclone.pmdoc")
            for name in listdir(docDir):
                writeTemplate(join(packageMakerConfigDir, name),
                              join(docDir, name), data)

            # Create package
            if call([packageMakerApp, "--id", "com.googlecode.synthclone",
                     "--doc", packageMakerConfigDir]):
                parser.error("packagemaker returned an error")

        finally:
            rmtree(packageMakerConfigDir)
    finally:
        rmtree(tempDir)

    stdout.write("Package '%s' built successfully.\n" % package)

if __name__ == "__main__":
    main()
