#!/usr/bin/env python

from optparse import OptionParser
from os.path import abspath, dirname, join
from subprocess import call
from sys import argv, stdout

from install.util import (
    MAJOR_VERSION,
    MINOR_VERSION,
    PLATFORM_MACX,
    PLATFORM_UNIX,
    PLATFORM_WIN32,
    REVISION,
    getPlatform,
    getTemplatesDirectory,
    writeTemplate
)

def main():
    platform = getPlatform()
    platformArgs = []
    if platform == PLATFORM_MACX:
        defaultPrefix = "/"
        platformArgs += ["-spec", "macx-g++"]
        platformStr = "MACX"
    elif platform == PLATFORM_WIN32:
        defaultPrefix = "C:\\Program Files\\synthclone"
        platformStr = "WIN32"
    else:
        defaultPrefix = "/usr/local"
        platformStr = "UNIX"

    parser = OptionParser("usage: %prog [options] [qmake-args]")
    parser.add_option("-b", "--build-dir", action="store", default=None,
                      dest="buildDir", help="Build directory")
    parser.add_option("-d", "--debug", action="store_true", default=False,
                      dest="debug", help="Build a debug executable")
    parser.add_option("-m", "--make-dir", action="store", default=None,
                      dest="makeDir", help="Make directory")
    parser.add_option("-p", "--prefix", action="store", default=None,
                      dest="prefix", help="Install prefix")
    parser.add_option("--skip-api-docs", action="store", default=0,
                      dest="skipAPIDocs", help="Don't build API documentation",
                      type="int")
    parser.add_option("--skip-headers", action="store", default=0,
                      dest="skipHeaders", help="Don't build API headers",
                      type="int")
    parser.add_option("--skip-hydrogen", action="store", default=0,
                      dest="skipHydrogen",
                      help="Don't build the Hydrogen plugin", type="int")
    parser.add_option("--skip-jack", action="store", default=0,
                      dest="skipJACK", help="Don't build the JACK plugin",
                      type="int")
    parser.add_option("--skip-portmedia", action="store", default=0,
                      dest="skipPortMedia",
                      help="Don't build the PortMedia plugin", type="int")
    parser.add_option("--skip-sfz", action="store", default=0, dest="skipSFZ",
                      help="Don't build the SFZ plugin", type="int")
    parser.add_option("--skip-trimmer", action="store", default=0,
                      dest="skipTrimmer",
                      help="Don't build the trimmer plugin", type="int")
    parser.add_option("--skip-zone-generator", action="store", default=0,
                      dest="skipZoneGenerator",
                      help="Don't build the zone generator plugin", type="int")
    options, args = parser.parse_args()

    scriptDir = abspath(dirname(argv[0]))
    buildDir = options.buildDir
    if buildDir is None:
        buildDir = join(scriptDir, "build")
    else:
        buildDir = abspath(buildDir)
    makeDir = options.makeDir
    if makeDir is None:
        makeDir = join(scriptDir, "make")
    else:
        makeDir = abspath(makeDir)
    prefix = options.prefix
    if prefix is None:
        prefix = defaultPrefix
    else:
        prefix = abspath(prefix)

    # Write config.h
    data = {
        "majorVersion": MAJOR_VERSION,
        "minorVersion": MINOR_VERSION,
        "platform": platformStr,
        "revision": REVISION
    }
    writeTemplate(join(scriptDir, "src", "include", "synthclone", "config.h"),
                  join(getTemplatesDirectory(), "config.h"), data)

    # Run `qmake`
    qmakeArgs = ["qmake", "-recursive"] + platformArgs + args + \
        ["MAJOR_VERSION=%d" % MAJOR_VERSION, "MINOR_VERSION=%d" % MINOR_VERSION,
         "REVISION=%d" % REVISION, "BUILDDIR=%s" % buildDir,
         "MAKEDIR=%s" % makeDir, "PREFIX=%s" % prefix]
    if options.skipAPIDocs:
        qmakeArgs.append("SKIP_API_DOCS=1")
    if options.skipHeaders:
        qmakeArgs.append("SKIP_HEADERS=1")
    if options.debug:
        qmakeArgs.append("DEBUG=1")
    if options.skipHydrogen:
        qmakeArgs.append("SKIP_HYDROGEN_PLUGIN=1")
    if options.skipJACK:
        qmakeArgs.append("SKIP_JACK_PLUGIN=1")
    if options.skipPortMedia:
        qmakeArgs.append("SKIP_PORTMEDIA_PLUGIN=1")
    if options.skipSFZ:
        qmakeArgs.append("SKIP_SFZ_PLUGIN=1")
    if options.skipTrimmer:
        qmakeArgs.append("SKIP_TRIMMER_PLUGIN=1")
    if options.skipZoneGenerator:
        qmakeArgs.append("SKIP_ZONE_GENERATOR_PLUGIN=1")
    if call(qmakeArgs):
        parser.error("qmake returned an error")

    stdout.write("Configure successful.  Run `make` to build, and "
                 "`make install` to install.\n")

if __name__ == "__main__":
    main()
